/* This file was generated by generate-bolts.py */
/* Do not modify this file! Modify the _csv file it was generated from. */

#ifndef LIGHTNING_${idem}
#define LIGHTNING_${idem}
#include <ccan/tal/tal.h>
#include <wire/wire.h>
% for i in includes:
${i}
% endfor

## Enum sets for wire messages & tlvs
% for enum_set in enum_sets:
enum ${enum_set['name']} {
    % for msg in enum_set['set']:
        % for comment in msg.comments:
        /* ${comment} */
        % endfor
        ${msg.enum_name()} = ${msg.number},
    % endfor
};

%endfor
## The 'name' functions for the enums
% for enum_set in enum_sets:
const char *${enum_set['name']}_name(int e);
% endfor

## Structs for subtypes + tlv messages
% for struct in structs:
struct ${struct.struct_name()} {
        % for f in struct.fields.values():
        % if f.is_len_field:
<% continue %>
        % endif
            % if f.has_len_field():
        ${f.type_obj.type_name()} *${f.name};
            % elif f.is_array():
        ${f.type_obj.type_name()} ${f.name}[${f.count}];
            % else:
        ${f.type_obj.type_name()} ${f.name};
            % endif
        % endfor
};
% endfor
## Structs for TLV types!
% for tlv in tlvs:
struct ${tlv.name} {
    % for msg_name in tlv.messages.keys():
        struct ${tlv.name}_${msg_name} *${msg_name};
    % endfor
};
% endfor

## ${func_decls}
#endif /* LIGHTNING_${idem} */
